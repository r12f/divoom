parameters:
  - name: buildVersionMajor
    type: string
    default: 0
  - name: buildVersionMinor
    type: string
    default: 0
  - name: buildVersionRevision
    type: string
    default: 0
  - name: isPRWorkflow
    type: boolean
    default: false

stages:
  - stage: Build
    jobs:
      - job: Build
        #
        # Build flavors
        #
        strategy:
          matrix:
            windows-x86:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: x86
              is_cross_compile: true
            windows-x64:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: x86_64
              is_cross_compile: false
            windows-arm64:
              poolName: Azure Pipelines
              imageName: 'windows-latest'
              target_os: windows
              target_arch: aarch64
              is_cross_compile: true
            linux-x86:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: x86
              is_cross_compile: true
            linux-x64:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: x86_64
              is_cross_compile: false
            linux-arm:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: arm
              is_cross_compile: true
            linux-arm64:
              poolName: Azure Pipelines
              imageName: 'ubuntu-latest'
              target_os: linux
              target_arch: aarch64
              is_cross_compile: true
            macos-x64:
              poolName: Azure Pipelines
              imageName: 'macos-latest'
              target_os: macos
              target_arch: x86_64
              is_cross_compile: false

        pool:
          name: $(poolName)
          vmImage: $(imageName)

        workspace:
          clean: all

        steps:
          #
          # Force cleanup.
          # Self-hosted agents must be cleaned up, otherwise it might carry the previous result to the latest build.
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#clean-the-local-repo-on-the-agent
          #
          - checkout: self
            clean: true

          #
          # Environment variable updates
          #
          - bash: |
              BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
              echo "##vso[task.setvariable variable=Build.Version]$BUILD_VERSION"
              echo "Updated Build.Version to $BUILD_VERSION"
            displayName: Update build environment variables

          #
          # Update build environment
          #
          - bash: |
              rustup default stable
              rustup update stable
            displayName: rustup update default toolchain

          - script: choco install just -y
            displayName: Install make tool on Windows
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))

          - bash: sudo snap install --edge --classic just
            displayName: Install make tool on Linux
            condition: and(succeeded(), eq(variables['target_os'], 'linux'))

          - bash: brew install just
            displayName: Install make tool on Mac
            condition: and(succeeded(), eq(variables['target_os'], 'macos'))

          #
          # Install build tools
          #
          - script: just init-win
            displayName: Install build tools on windows
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))
            env:
              BUILD_ARCH: $(target_arch)

          - script: just init-linux
            displayName: Install build tools on linux
            condition: and(succeeded(), eq(variables['target_os'], 'linux'))
            env:
              BUILD_ARCH: $(target_arch)

          - script: just init-mac
            displayName: Install build tools on macos
            condition: and(succeeded(), eq(variables['target_os'], 'macos'))
            env:
              BUILD_ARCH: $(target_arch)

          #
          # Build
          #
          - script: |
              echo "Updating build version to: $(Build.Version)"
              echo $(Build.Version) > ./build/version.txt
              just fix-ver
            displayName: Fix package version
            condition: and(succeeded(), ne('${{ parameters.isPRWorkflow }}', 'true'))
            env:
              BUILD_VERSION: $(Build.Version)
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just build
            displayName: Build
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just make-symbols
            displayName: Strip binary and build symbol files
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          #
          # Running all tests
          #
          - bash: just test
            displayName: Run tests
            condition: and(succeeded(), ne(variables['is_cross_compile'], 'true'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)
              RUST_LOG: debug
              RUST_BACKTRACE: full

          #
          # Pack
          #
          - script: just pack-prepare
            displayName: Prepare to pack packages
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-source
            displayName: Pack source files
            condition: and(succeeded(), eq(variables['target_os'], 'linux'), eq(variables['target_arch'], 'x86_64'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-post-build
            displayName: Pack post-build build tasks
            condition: and(succeeded(), eq(variables['target_os'], 'windows'), eq(variables['target_arch'], 'x86_64'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-binary divoom_cli
            displayName: Pack divoom-cli binaries
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)
              BUILD_SIGNING_URL: $(BuildSigningURL)
              BUILD_SIGNING_VAULT_URL: $(BuildSigningVaultURL)
              BUILD_SIGNING_TENANT_ID: $(BuildSigningTenantId)
              BUILD_SIGNING_CLIENT_ID: $(BuildSigningClientId)
              BUILD_SIGNING_CLIENT_SECRET: $(BuildSigningClientSecret)
              BUILD_SIGNING_CERT_NAME: $(BuildSigningCertName)

          - script: just pack-symbols divoom_cli
            displayName: Pack divoom-cli symbols
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-binary-zip divoom_cli
            displayName: Zip divoom-cli binaries
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-nuget divoom_cli
            displayName: Pack divoom-cli nuget package
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-msix divoom_cli
            displayName: Pack divoom-cli msix package
            condition: and(succeeded(), eq(variables['target_os'], 'windows'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)
              BUILD_SIGNING_URL: $(BuildSigningURL)
              BUILD_SIGNING_VAULT_URL: $(BuildSigningVaultURL)
              BUILD_SIGNING_TENANT_ID: $(BuildSigningTenantId)
              BUILD_SIGNING_CLIENT_ID: $(BuildSigningClientId)
              BUILD_SIGNING_CLIENT_SECRET: $(BuildSigningClientSecret)
              BUILD_SIGNING_CERT_NAME: $(BuildSigningCertName)

          - script: just pack-choco divoom_cli
            displayName: Pack divoom-cli chocolatey package source
            condition: and(succeeded(), eq(variables['target_os'], 'windows'), eq(variables['target_arch'], 'x86_64'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          - script: just pack-scoop divoom_cli
            displayName: Pack divoom-cli scoop package source
            condition: and(succeeded(), eq(variables['target_os'], 'windows'), eq(variables['target_arch'], 'x86_64'))
            env:
              BUILD_PROFILE: "release"
              BUILD_ARCH: $(target_arch)

          #
          # Copy all files to publish folder
          #
          - task: CopyFiles@2
            displayName: Copy published artifacts to output
            condition: and(succeeded(), ne('${{ parameters.isPRWorkflow }}', 'true'))
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/publish'
              targetFolder: '$(Build.ArtifactStagingDirectory)'

          #
          # Publish artifacts
          #
          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            condition: and(succeeded(), ne('${{ parameters.isPRWorkflow }}', 'true'))
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'

  - stage: PostBuild
    jobs:
      - job: PostBuild
        condition: and(succeeded(), eq('${{ parameters.isPRWorkflow }}', 'false'))

        pool:
          name: Azure Pipelines
          vmImage: 'windows-latest'

        workspace:
          clean: all

        steps:
          - checkout: none

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/r12f.divoom'

          - bash: |
              BUILD_VERSION=$(buildVersionMajor).$(buildVersionMinor).$(buildVersionRevision)
              echo "##vso[task.setvariable variable=Build.Version]$BUILD_VERSION"
              echo "Updated Build.Version to $BUILD_VERSION"
            displayName: Update build environment variables

          - script: choco install just -y
            displayName: Install make tool

          - script: cp "./Build.Build.windowsx64/post-build.justfile" "./justfile"
            displayName: Copy just file
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just prepare-release-prepare
            displayName: Prepare to prepare release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just pack-symbols
            displayName: Pack symbol package for release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just pack-choco
            displayName: Pack chocolatey package for release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just pack-scoop
            displayName: Pack scoop package for release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just prepare-crate-io-release
            displayName: Prepare Crate.IO release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just prepare-github-release
            displayName: Prepare github release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - script: just prepare-nuget-release
            displayName: Prepare nuget release
            workingDirectory: '$(System.DefaultWorkingDirectory)/r12f.divoom'
            env:
              BUILD_VERSION: $(Build.Version)

          - task: CopyFiles@2
            displayName: Copy packages to staging folder
            inputs:
              sourceFolder: '$(System.DefaultWorkingDirectory)/r12f.divoom/release'
              targetFolder: '$(Build.ArtifactStagingDirectory)/Releases'

          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'